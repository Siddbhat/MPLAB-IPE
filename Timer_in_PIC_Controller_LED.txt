#pragma config FOSC = INTOSC    // Oscillator Selection Bits (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = OFF       // Watchdog Timer Enable (WDT disabled)
#pragma config PWRTE = ON       // Power-up Timer Enable (PWRT enabled)
#pragma config MCLRE = OFF      // MCLR Pin Function Select (MCLR/VPP pin function is digital input)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable (Brown-out Reset disabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)
////
////// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LPBOR = OFF      // Low-Power Brown Out Reset (Low-Power BOR is disabled)
#pragma config LVP = OFF        // Low-Voltage Programming Enable (High-voltage on MCLR/VPP must be used for programming)
//
//// #pragma config statements should precede project file includes.
//// Use project enums instead of #define for ON and OFF.
//
#include <xc.h>
#include <stdint.h>

#define _XTAL_FREQ 16000000     

 void main(void) {
    TRISA = 0b00000000; // Set RA4 and RA5 as output
    PORTA = 0b00000000; // Turn off both LEDs initially
    
    // Set Timer1 configuration with 1:8 prescaler (0.5us per tick)
    T1CON = 0b00110000;
    
    while (1) {
        PORTA ^= 0b00010000;
        
        TMR1H = 0x0B; // High byte
        TMR1L = 0xDC; // Low byte
        
        TMR1ON = 1;
        
        while (TMR1IF == 0);
        TMR1IF = 0;
        PORTA &= ~0b00010000;
        PORTA ^= 0b00100000;
        TMR1H = 0x0B; // High byte
        TMR1L = 0xDC; // Low byte
        TMR1ON = 1;
        while (TMR1IF == 0);
        
        TMR1IF = 0;        
        PORTA &= ~0b00100000; 
    }
}      
  















